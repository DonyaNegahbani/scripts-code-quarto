---
title: "Homework: Finding Your Way in R and Python"
execute:
  error: true
author: "Donya Negahbani"
output: html_document
---

Instructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.

In Canvas, submit a link to your github repository containing the updated files. 

Note: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session). 

# Modes of Execution

Consider the 6 counting words examples in the [textbook module](https://srvanderplas.github.io/stat-computing-r-python/part-tools/04-scripts-notebooks.html#a-short-history-of-talking-to-computers) (they are in 3 separate 'your turn' sections). Look at the code, and then at the information provided for each example. What is different? What is the same? Write 2-3 sentences describing how script mode, interactive mode, and command-line mode differ in R and Python.

---

Script mode, interactive mode, and command-line mode in R and Python each have distinct differences and similarities. Interactive mode allows users to execute code one line at a time, providing immediate feedback, making it ideal for experimentation and quick tasks. Script mode involves writing a sequence of commands in a file that can be executed all at once, which is useful for automating tasks and ensuring reproducibility. Command-line mode allows scripts to be executed directly from the terminal or command prompt, enabling automation without the need for an IDE, often used in production or for batch processing. While all three modes support code execution, interactive mode emphasizes exploration, script mode focuses on repeatability, and command-line mode excels in automation.

---


# Programming with Variables

In this section, you'll demonstrate that you understand how to solve simple math problems using code. First, you'll want to define variables to represent the variables in the equation. Give the variables values that can be used to determine the value of the variable on the other side of the `=`. Then, write code to solve the equation for the value of the variable. 

## Pythagorean Theorem in R

$$a^2 + b^2 = c^2$$

Use the chunk below to define variables $a$, $b$, and $c$, where you define the values of $a$ and $b$, and $c$ is determined mathematically. You may need to find the square root function in R to make this work.

```{r}

a <- sample(-10:10, 1)
b <- sample(-10:10, 1)

c <- sqrt(a^2 + b^2)

print(paste("a =", a))
print(paste("b =", b))
print(paste("c =", c))

```
```{python}
import math
import random

a = random.randint(-10, 10)
b = random.randint(-10, 10)
c = math.sqrt(a**2 + b**2)

print(f"a = {a}")
print(f"b = {b}")
print(f"c = {c}")
```


## Quadratic Formula in Python

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Use the chunk below to define variables $a$, $b$, and $c$, and then define $x1$ and $x2$, the possible values for $x$. You may find it helpful to define a few additional variables, such as the value of the discriminant $\sqrt{b^2 - 4ac}$, to make it easier to calculate the results. 

```{r}
a <- sample(-10:10, 1)
b <- sample(-10:10, 1)
c <- sample(-20:20, 1)

discriminant <- b^2 - 4 * a * c

if (discriminant >= 0) {
  x1 <- (-b + sqrt(discriminant)) / (2 * a)
  x2 <- (-b - sqrt(discriminant)) / (2 * a)
  print(sprintf('The solutions are x1 = %.2f and x2 = %.2f', x1, x2))
} else {
  print(sprintf('The discriminant is negative (%.2f), so no real solutions exist.', discriminant))
}
```


```{python}
import random
import math

a = random.randint(-8, 8)
b = random.randint(-12, 20)
c = random.randint(-10, 10)

discriminant = b**2 - 4*a*c

if discriminant >= 0:
    x1 = (-b + math.sqrt(discriminant)) / (2*a)
    x2 = (-b - math.sqrt(discriminant)) / (2*a)
    print(f'The solutions are x1 = {x1} and x2 = {x2}')
else:
    print(f'The discriminant is negative ({discriminant}), so no real solutions exist.')


```



# Debugging practice

Look at the data frame below, which contains 3 columns: `Name`, `Salary`, and `Hire.Year`. You've read in this data from the [data file online](https://github.com/unl-statistics/stat850/blob/main/homework/02-data.tsv) and ideally, you want to plot `Hire.Year` on the x-axis and `Salary` on the y-axis (code to do this is provided).

Unfortunately, the data isn't reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.

Some things you may want to consider: - `gsub`, a "find and replace" function. See more details by typing `?gsub` into the R console. - You can access columns in a data frame using `$`: `df$col1` will get you `col1` of the `df` object. - You can access items in a vector using `[]`: `x[1]` will get you the first item in `x`

Note: You should be able to **identify** the problem given what you know about R from this week's reading. You may not be able to implement a solution without some additional research, so if you don't get that far that's ok.

```{r}
# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

# This code plots labels for each individual at location (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

# This displays the salary object
salary
```

------------------------------------------------------------------------

The problem with the data is:

The Salary column in this data frame contains values with dollar signs and commas (e.g., $67,872.00). This format prevents the column from being treated as numeric, which is necessary for accurate plotting and data analysis.

Here is how I solved the problem:

I used the gsub function to remove the dollar signs and commas from the Salary column and then converted the cleaned data to numeric using the as.numeric function. This allowed the Salary values to be treated as numbers.

```{r cleaning-the-data-r}
library(ggplot2)
salary <- read.table("02-data.tsv", sep = "\t", header = TRUE)

salary$Salary <- as.numeric(gsub("[\\$,]", "", salary$Salary))

ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label() +
  labs(title = "Salary vs Hire Year", x = "Hire Year", y = "Salary") +
  theme_minimal()

print(salary)

```



```{python}

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

salary = pd.read_csv("02-data.tsv", sep="\t")

salary['Salary'] = salary['Salary'].replace({'\$': '', ',': ''}, regex=True).astype(float)
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Hire Year', y='Salary', data=salary)
for i in range(len(salary)):
    plt.text(salary['Hire Year'][i], salary['Salary'][i], salary['Name'][i], 
             fontsize=9, ha='right')
plt.title('Salary vs Hire Year')
plt.xlabel('Hire Year')
plt.ylabel('Salary')
plt.show()
print(salary)

```
The graph suggests a negative relationship between salary and the year of hiring, meaning that employees hired earlier tend to have higher salaries. For example, Michael Scott, hired around 1995, has the highest salary, while Pam Beesly, hired in 2003, has the lowest salary. This may indicate that salary increases with tenure or that more recent hires receive lower starting salaries.
